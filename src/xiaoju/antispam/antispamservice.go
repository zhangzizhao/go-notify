// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package antispam

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"xiaoju"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = xiaoju.GoUnusedProtection__

type AntiSpamService interface {
	xiaoju.BaseService

	// Parameters:
	//  - Req
	IsSpam(req *Request) (r bool, err error)
}

type AntiSpamServiceClient struct {
	*xiaoju.BaseServiceClient
}

func NewAntiSpamServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AntiSpamServiceClient {
	return &AntiSpamServiceClient{BaseServiceClient: xiaoju.NewBaseServiceClientFactory(t, f)}
}

func NewAntiSpamServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AntiSpamServiceClient {
	return &AntiSpamServiceClient{BaseServiceClient: xiaoju.NewBaseServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Req
func (p *AntiSpamServiceClient) IsSpam(req *Request) (r bool, err error) {
	if err = p.sendIsSpam(req); err != nil {
		return
	}
	return p.recvIsSpam()
}

func (p *AntiSpamServiceClient) sendIsSpam(req *Request) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("isSpam", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IsSpamArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AntiSpamServiceClient) recvIsSpam() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "isSpam" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isSpam failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isSpam failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isSpam failed: invalid message type")
		return
	}
	result := IsSpamResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	value = result.GetSuccess()
	return
}

type AntiSpamServiceProcessor struct {
	*xiaoju.BaseServiceProcessor
}

func NewAntiSpamServiceProcessor(handler AntiSpamService) *AntiSpamServiceProcessor {
	self4 := &AntiSpamServiceProcessor{xiaoju.NewBaseServiceProcessor(handler)}
	self4.AddToProcessorMap("isSpam", &antiSpamServiceProcessorIsSpam{handler: handler})
	return self4
}

type antiSpamServiceProcessorIsSpam struct {
	handler AntiSpamService
}

func (p *antiSpamServiceProcessorIsSpam) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IsSpamArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isSpam", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IsSpamResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.IsSpam(args.Req); err2 != nil {
		switch v := err2.(type) {
		case *ServiceError:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isSpam: "+err2.Error())
			oprot.WriteMessageBegin("isSpam", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("isSpam", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type IsSpamArgs struct {
	Req *Request `thrift:"req,1" json:"req"`
}

func NewIsSpamArgs() *IsSpamArgs {
	return &IsSpamArgs{}
}

var IsSpamArgs_Req_DEFAULT *Request

func (p *IsSpamArgs) GetReq() *Request {
	if !p.IsSetReq() {
		return IsSpamArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IsSpamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IsSpamArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IsSpamArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &Request{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IsSpamArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isSpam_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IsSpamArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IsSpamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsSpamArgs(%+v)", *p)
}

type IsSpamResult struct {
	Success *bool         `thrift:"success,0" json:"success"`
	Se      *ServiceError `thrift:"se,1" json:"se"`
}

func NewIsSpamResult() *IsSpamResult {
	return &IsSpamResult{}
}

var IsSpamResult_Success_DEFAULT bool

func (p *IsSpamResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return IsSpamResult_Success_DEFAULT
	}
	return *p.Success
}

var IsSpamResult_Se_DEFAULT *ServiceError

func (p *IsSpamResult) GetSe() *ServiceError {
	if !p.IsSetSe() {
		return IsSpamResult_Se_DEFAULT
	}
	return p.Se
}
func (p *IsSpamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsSpamResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *IsSpamResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IsSpamResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *IsSpamResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &ServiceError{}
	if err := p.Se.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
	}
	return nil
}

func (p *IsSpamResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isSpam_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IsSpamResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IsSpamResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err)
		}
	}
	return err
}

func (p *IsSpamResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsSpamResult(%+v)", *p)
}
