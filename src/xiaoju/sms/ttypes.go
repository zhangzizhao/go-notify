// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package sms

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"xiaoju"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = xiaoju.GoUnusedProtection__
var GoUnusedProtection__ int

type SerialNumber int64

type Message struct {
	BusinessId  int32   `thrift:"businessId,1,required"`
	Phones      []int64 `thrift:"phones,2,required"`
	Message     string  `thrift:"message,3,required"`
	SendTime    int32   `thrift:"sendTime,4"`
	ExpiredTime int32   `thrift:"expiredTime,5"`
	Priority    int32   `thrift:"priority,6"`
	JobId       int32   `thrift:"jobId,7"`
	Channel     int32   `thrift:"channel,8"`
	Signature   string  `thrift:"signature,9"`
}

func NewMessage() *Message {
	return &Message{
		SendTime: 0,

		ExpiredTime: 0,

		Priority: 0,

		JobId: 0,

		Channel: 0,

		Signature: "",
	}
}

func (p *Message) IsSetSendTime() bool {
	return p.SendTime != 0
}

func (p *Message) IsSetExpiredTime() bool {
	return p.ExpiredTime != 0
}

func (p *Message) IsSetPriority() bool {
	return p.Priority != 0
}

func (p *Message) IsSetJobId() bool {
	return p.JobId != 0
}

func (p *Message) IsSetChannel() bool {
	return p.Channel != 0
}

func (p *Message) IsSetSignature() bool {
	return p.Signature != ""
}

func (p *Message) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Message) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.BusinessId = v
	}
	return nil
}

func (p *Message) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Phones = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem0 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem0 = v
		}
		p.Phones = append(p.Phones, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Message) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Message = v
	}
	return nil
}

func (p *Message) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.SendTime = v
	}
	return nil
}

func (p *Message) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.ExpiredTime = v
	}
	return nil
}

func (p *Message) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Priority = v
	}
	return nil
}

func (p *Message) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.JobId = v
	}
	return nil
}

func (p *Message) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Channel = v
	}
	return nil
}

func (p *Message) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.Signature = v
	}
	return nil
}

func (p *Message) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Message"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("businessId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:businessId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.BusinessId)); err != nil {
		return fmt.Errorf("%T.businessId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:businessId: %s", p, err)
	}
	return err
}

func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Phones != nil {
		if err := oprot.WriteFieldBegin("phones", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:phones: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Phones)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Phones {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:phones: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:message: %s", p, err)
	}
	return err
}

func (p *Message) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSendTime() {
		if err := oprot.WriteFieldBegin("sendTime", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:sendTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.SendTime)); err != nil {
			return fmt.Errorf("%T.sendTime (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:sendTime: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpiredTime() {
		if err := oprot.WriteFieldBegin("expiredTime", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:expiredTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ExpiredTime)); err != nil {
			return fmt.Errorf("%T.expiredTime (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:expiredTime: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPriority() {
		if err := oprot.WriteFieldBegin("priority", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:priority: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Priority)); err != nil {
			return fmt.Errorf("%T.priority (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:priority: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobId() {
		if err := oprot.WriteFieldBegin("jobId", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:jobId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.JobId)); err != nil {
			return fmt.Errorf("%T.jobId (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:jobId: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetChannel() {
		if err := oprot.WriteFieldBegin("channel", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:channel: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Channel)); err != nil {
			return fmt.Errorf("%T.channel (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:channel: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignature() {
		if err := oprot.WriteFieldBegin("signature", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:signature: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Signature)); err != nil {
			return fmt.Errorf("%T.signature (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:signature: %s", p, err)
		}
	}
	return err
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)
}

type ServiceError struct {
	ErrorA1 string `thrift:"error,1,required"`
}

func NewServiceError() *ServiceError {
	return &ServiceError{}
}

func (p *ServiceError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ServiceError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ErrorA1 = v
	}
	return nil
}

func (p *ServiceError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServiceError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ServiceError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:error: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorA1)); err != nil {
		return fmt.Errorf("%T.error (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:error: %s", p, err)
	}
	return err
}

func (p *ServiceError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceError(%+v)", *p)
}

type InputError struct {
	ErrorA1 string `thrift:"error,1,required"`
}

func NewInputError() *InputError {
	return &InputError{}
}

func (p *InputError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InputError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ErrorA1 = v
	}
	return nil
}

func (p *InputError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InputError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *InputError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:error: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorA1)); err != nil {
		return fmt.Errorf("%T.error (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:error: %s", p, err)
	}
	return err
}

func (p *InputError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InputError(%+v)", *p)
}
